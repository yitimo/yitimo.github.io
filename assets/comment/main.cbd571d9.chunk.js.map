{"version":3,"sources":["containers/Nav/index.tsx","utils/storage.ts","containers/List/service.ts","utils/consts.ts","utils/index.ts","components/Comment/index.jsx","containers/List/index.jsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Nav","className","Component","key","rs","JSON","parse","window","localStorage","getItem","expired","Date","getTime","e","value","setItem","stringify","id","force","cachedData","storage","axios","request","url","method","status","data","code","message","statusText","Error","CommentContext","React","createContext","addZero","src","Comment","this","props","floor","content","createTime","time","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","formatTime","List","state","service","context","then","res","console","log","setState","catch","err","error","comments","map","comment","index","readOnly","placeholder","name","rows","contextType","App","Boolean","location","hostname","match","commentRoot","document","getElementById","commentId","getAttribute","ReactDOM","render","Provider","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kTAKqBA,G,uLAEb,OACI,yBAAKC,UAAU,eAAf,oB,GAHqBC,c,yCCLlB,WACEC,GACT,IACI,IAAMC,EAAKC,KAAKC,MAAMC,OAAOC,aAAaC,QAAQN,IAAQ,QACpDO,EAAUL,KAAKC,MAAMC,OAAOC,aAAaC,QAApB,UAA+BN,EAA/B,cAAiD,QAC5E,OAAKO,GAAWA,GAAU,IAAIC,MAAOC,UAC1BR,EAEJ,KACT,MAAOS,GACL,OAAO,OAVJ,WAaPV,EAAaW,GAAkC,IAAtBJ,EAAqB,uDAAH,EAC3CH,OAAOC,aAAaO,QAAQZ,EAAKE,KAAKW,UAAUF,IAChDP,OAAOC,aAAaO,QAApB,UAA+BZ,EAA/B,YAA8CE,KAAKW,WAAU,IAAIL,MAAOC,UAAYF,KCX7E,WACDO,GAA0C,IAA9BC,EAA6B,gMAC1CA,EAD0C,qBAErCC,EAAaC,EAAA,kBAAuBH,KAFC,yCAIhCE,GAJgC,uBAerCE,IAAMC,QAAQ,CACpBC,IAAI,GAAD,OCrBU,6BDqBV,wBAA8BN,GACjCO,OAAQ,QAjBmC,mBAQ3CC,EAR2C,EAQ3CA,OAR2C,IAS3CC,KAT2C,gBAavC,GAbuC,GAUvCC,YAVuC,MAUhC,IAVgC,MAWvCD,YAXuC,MAWhC,KAXgC,MAYvCE,eAZuC,MAY7B,2BAZ6B,EAc3CC,EAd2C,EAc3CA,WAKW,MAAXJ,EAnB2C,oBAqB9B,QAATE,EArBuC,wBAsBvCP,EAAA,kBAAuBH,GAAMS,EAAM,MAtBI,kBAuBhCA,GAvBgC,cAyBjC,IAAII,MAAJ,UAAaH,EAAb,YAAqBC,IAzBY,cA4BzC,IAAIE,MAAJ,UAAaL,EAAb,YAAuBI,IA5BkB,+CEH1CE,EAAiBC,IAAMC,cAAc,IAyBlD,SAASC,EAAQC,GACb,OAAOA,EAAM,GAAN,WAAeA,GAAQA,E,UCxBbC,E,iLACP,IAAD,EAODC,KAAKC,MALLC,EAFC,EAEDA,MAFC,IAGDb,KAHC,gBAMG,GANH,GAIGc,eAJH,MAIa,GAJb,MAKGC,kBALH,MAKgB,EALhB,EAQL,OACI,yBAAKxC,UAAU,gBACX,0BAAMA,UAAU,SAAhB,IACMsC,GAEN,0BAAMtC,UAAU,UACXuC,GAEL,0BAAMvC,UAAU,QDjBzB,SAAoBkC,GACvB,IAAKA,EACD,OAAOA,EAEX,GAAmB,kBAARA,EACP,OAAOA,EAEX,IAAMO,EAAO,IAAI/B,KAAKwB,GACtB,MAAM,GAAN,OACIO,EAAKC,cADT,YAGIT,EAAQQ,EAAKE,WAAW,GAH5B,YAKIV,EAAQQ,EAAKG,WALjB,YAOIX,EAAQQ,EAAKI,YAPjB,YASIZ,EAAQQ,EAAKK,cATjB,YAWIb,EAAQQ,EAAKM,eCDAC,CAAWR,S,GAlBKvC,aCGhBgD,G,kBACjB,WAAYZ,GAAQ,IAAD,8BACf,4CAAMA,KAEDa,MAAQ,CACTzB,KAAM,IAJK,E,iFAQE,IAAD,OAChB0B,EAAYf,KAAKgB,SAASC,MAAK,SAACC,GAC5BC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACVhC,KAAM6B,OAEXI,OAAM,SAACC,GACNJ,QAAQK,MAAMD,Q,+BAGZ,IAAD,EAKDvB,KAAKc,MAHLzB,KAFC,gBAIG,GAJH,GAGGoC,gBAHH,MAGc,GAHd,EAML,OACI,yBAAK7D,UAAU,gBAEP6D,EAASC,KAAI,SAACC,EAASC,GAAV,OACT,kBAAC,EAAD,CAAS9D,IAAK6D,EAAQ/C,GAAIS,KAAMsC,EAASzB,MAAO0B,EAAM,OAG9D,8BACIhE,UAAU,SACViE,UAAQ,EACRC,YAAY,8BACZC,KAAK,UACLC,KAAK,W,GArCSnE,cAAbgD,EAQVoB,YAAcvC,E,ICVJwC,E,iLAEjB,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GALyBvC,IAAM9B,WCOnBsE,QACW,cAA7BjE,OAAOkE,SAASC,UAEe,UAA7BnE,OAAOkE,SAASC,UAEhBnE,OAAOkE,SAASC,SAASC,MACvB,2DCXN,IAAMC,EAAcC,SAASC,eAAe,gBACtCC,EAAaH,GAAeA,EAAYI,aAAa,oBAAuB,GAElFC,IAASC,OACL,kBAACnD,EAAeoD,SAAhB,CAAyBrE,MAAOiE,GAC5B,kBAAC,EAAD,OAENH,GD2HI,kBAAmBQ,WACrBA,UAAUC,cAAcC,MAAMhC,MAAK,SAAAiC,GACjCA,EAAaC,kB","file":"static/js/main.cbd571d9.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport Icon from '../../components/Icon'\n\nimport './index.scss'\n\nexport default class Nav extends Component {\n    render() {\n        return (\n            <div className=\"comment-nav\">\n                评论\n            </div>\n        )\n    }\n}\n","export default {\n    get<T = any>(key: string): (T | null) {\n        try {\n            const rs = JSON.parse(window.localStorage.getItem(key) || 'null')\n            const expired = JSON.parse(window.localStorage.getItem(`${key}_expired`) || 'null')\n            if (!expired || expired > new Date().getTime()) {\n                return rs\n            }\n            return null\n        } catch (e) {\n            return null\n        }\n    },\n    set(key: string, value: any, expired: number = 0) {\n        window.localStorage.setItem(key, JSON.stringify(value))\n        window.localStorage.setItem(`${key}_expired`, JSON.stringify(new Date().getTime() + expired))\n    },\n    remove(key: string) {\n        window.localStorage.removeItem(key)\n    },\n    clear() {\n        window.localStorage.clear()\n    },\n}\n","import axios from 'axios'\nimport { apiDomain } from '../../utils/consts'\nimport storage from '../../utils/storage'\n\nexport default {\n    async get(id: string, force = false): Promise<any> {\n        if (!force) {\n            const cachedData = storage.get(`comment_${id}`)\n            if (cachedData) {\n                return cachedData\n            }\n        }\n        const {\n            status,\n            data: {\n                code = '0',\n                data = null,\n                message = '请求失败',\n            } = {},\n            statusText,\n        } = await axios.request({\n            url: `${apiDomain}/comment/get/${id}`,\n            method: 'GET',\n        })\n        if (status === 200) {\n            // @ts-ignore\n            if (code === '200') {\n                storage.set(`comment_${id}`, data, 120000)\n                return data\n            } else {\n                throw new Error(`${code}:${message}`)\n            }\n        }\n        throw new Error(`${status}:${statusText}`)\n    }\n}\n","export const apiDomain = 'https://yveltal.yitimo.com'\n// export const apiDomain = 'http://127.0.0.1:9999'\n","import React from 'react'\n\nexport const CommentContext = React.createContext('')\n\nexport function formatTime(src: number) {\n    if (!src) {\n        return src\n    }\n    if (typeof src !== 'number') {\n        return src\n    }\n    const time = new Date(src)\n    return `${\n        time.getFullYear()\n    }/${\n        addZero(time.getMonth()+1)\n    }/${\n        addZero(time.getDate())\n    } ${\n        addZero(time.getHours())\n    }:${\n        addZero(time.getMinutes())\n    }:${\n        addZero(time.getSeconds())\n    }`\n}\n\nfunction addZero(src: number) {\n    return src < 10 ? `0${src}` : src\n}\n","import React, { Component } from 'react'\nimport { formatTime } from '../../utils'\nimport './index.scss'\n\nexport default class Comment extends Component {\n    render() {\n        const {\n            floor,\n            data: {\n                content = '',\n                createTime = 0,\n            } = {},\n        } = this.props\n        return (\n            <div className=\"comment flex\">\n                <span className=\"floor\">\n                    #{floor}\n                </span>\n                <span className=\"flex-1\">\n                    {content}\n                </span>\n                <span className=\"time\">\n                    {formatTime(createTime)}\n                </span>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport service from './service'\nimport { CommentContext } from '../../utils'\nimport Comment from '../../components/Comment'\n\nimport './index.scss'\n\nexport default class List extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            data: [],\n        }\n    }\n    static contextType = CommentContext\n    componentDidMount() {\n        service.get(this.context).then((res) => {\n            console.log(res)\n            this.setState({\n                data: res,\n            })\n        }).catch((err) => {\n            console.error(err)\n        })\n    }\n    render() {\n        const {\n            data: {\n                comments = []\n            } = {},\n        } = this.state\n        return (\n            <div className=\"comment-list\">\n                {\n                    comments.map((comment, index) => (\n                        <Comment key={comment.id} data={comment} floor={index+1} />\n                    ))\n                }\n                <textarea\n                    className=\"create\"\n                    readOnly\n                    placeholder=\"添加评论...\"\n                    name=\"comment\"\n                    rows=\"5\"\n                />\n            </div>\n        )\n    }\n}\n","import React from 'react'\n\nimport Nav from './containers/Nav'\nimport List from './containers/List'\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <>\n        <Nav />\n        <List />\n      </>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles/global.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { CommentContext } from './utils'\n\nconst commentRoot = document.getElementById('comment-root')\nconst commentId = (commentRoot && commentRoot.getAttribute('data-comment-id')) || ''\n\nReactDOM.render(\n    <CommentContext.Provider value={commentId}>\n        <App />\n    </CommentContext.Provider>\n, commentRoot)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}